{
  "stats": {
    "suites": 4,
    "tests": 18,
    "passes": 18,
    "pending": 0,
    "failures": 0,
    "start": "2024-12-12T19:36:56.883Z",
    "end": "2024-12-12T19:37:00.774Z",
    "duration": 3891,
    "testsRegistered": 18,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9735a480-6009-44ef-9986-ca921cb2c30d",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c9f67bd0-8cda-41a1-a8f6-aa393c93056e",
          "title": "Validating GET End point",
          "fullFile": "F:\\Automation Projects\\WithSecure_Assignment\\WithSecure\\test\\triangleCalculationtest.js",
          "file": "\\test\\triangleCalculationtest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Retrieve app version with correct url",
              "fullTitle": "Validating GET End point Retrieve app version with correct url",
              "timedOut": false,
              "duration": 236,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.get('/version').then((res) => {\n    expect(res.statusCode).to.equal(200);\n    expect(res.text).to.equal(\"0.0.2\");\n});",
              "err": {},
              "uuid": "6ef5b99f-7c56-4202-a6c1-98a0a1c455e9",
              "parentUUID": "c9f67bd0-8cda-41a1-a8f6-aa393c93056e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Retrieve app version with incorrect url",
              "fullTitle": "Validating GET End point Retrieve app version with incorrect url",
              "timedOut": false,
              "duration": 140,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.get('/versions').then((res) => {\n    expect(res.statusCode).to.equal(418);\n    expect(res.text).to.equal(\"I'm a Teapot\");\n});",
              "err": {},
              "uuid": "a527ef64-f6e2-4dc7-a1f3-a9a6247e8806",
              "parentUUID": "c9f67bd0-8cda-41a1-a8f6-aa393c93056e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6ef5b99f-7c56-4202-a6c1-98a0a1c455e9",
            "a527ef64-f6e2-4dc7-a1f3-a9a6247e8806"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 376,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9f0d92e8-5dbb-41c5-8c86-fb16ef8ca622",
          "title": "All valid shapes of a triangle",
          "fullFile": "F:\\Automation Projects\\WithSecure_Assignment\\WithSecure\\test\\triangleCalculationtest.js",
          "file": "\\test\\triangleCalculationtest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify the equilateral triangle",
              "fullTitle": "All valid shapes of a triangle Verify the equilateral triangle",
              "timedOut": false,
              "duration": 1152,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"when a = b = c\"]).then((res) => {\n    expect(res.statusCode).to.equal(200);\n    expect(res.body.result).to.equal(\"This is equilateral triangle\");\n});",
              "err": {},
              "uuid": "a02c5f10-236a-4f1d-801a-6ba4269cbaf7",
              "parentUUID": "9f0d92e8-5dbb-41c5-8c86-fb16ef8ca622",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify two equal side and one different[isosceles triangle]",
              "fullTitle": "All valid shapes of a triangle Verify two equal side and one different[isosceles triangle]",
              "timedOut": false,
              "duration": 144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"when a = b != c\"]).then((res) => {\n    expect(res.statusCode).to.equal(201);\n    expect(res.body.result).to.equal(\"This is isosceles triangle\");\n});",
              "err": {},
              "uuid": "ed5533e0-a232-42b9-9017-d7e086c0efe8",
              "parentUUID": "9f0d92e8-5dbb-41c5-8c86-fb16ef8ca622",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify valid three sides are different",
              "fullTitle": "All valid shapes of a triangle Verify valid three sides are different",
              "timedOut": false,
              "duration": 139,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"when a != b != c\"]).then((res) => {\n    expect(res.statusCode).to.equal(200);\n    expect(res.body.result).to.equal(\"This is versatile triangle\");\n});",
              "err": {},
              "uuid": "8311e538-0553-4293-86b4-09be141b1829",
              "parentUUID": "9f0d92e8-5dbb-41c5-8c86-fb16ef8ca622",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a02c5f10-236a-4f1d-801a-6ba4269cbaf7",
            "ed5533e0-a232-42b9-9017-d7e086c0efe8",
            "8311e538-0553-4293-86b4-09be141b1829"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1435,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "061f9d19-0271-407f-b789-34cc576a1e72",
          "title": "Test Scenarios: Sum of two sides should be greter than 3rd side",
          "fullFile": "F:\\Automation Projects\\WithSecure_Assignment\\WithSecure\\test\\triangleCalculationtest.js",
          "file": "\\test\\triangleCalculationtest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify Sum of two side should be greater than 3rd side[when a + b < c]",
              "fullTitle": "Test Scenarios: Sum of two sides should be greter than 3rd side Verify Sum of two side should be greater than 3rd side[when a + b < c]",
              "timedOut": false,
              "duration": 136,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"when a + b < c\"]).then((res) => {\n    expect(res.statusCode).to.equal(418);\n    expect(res.body.error).to.equal(\"Sum of any 2 sides should be greater than the 3rd\");\n});",
              "err": {},
              "uuid": "1386bb1e-a77a-432a-9118-9b3822716474",
              "parentUUID": "061f9d19-0271-407f-b789-34cc576a1e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Sum of two side should be greater than 3rd side[when b + c < a]",
              "fullTitle": "Test Scenarios: Sum of two sides should be greter than 3rd side Verify Sum of two side should be greater than 3rd side[when b + c < a]",
              "timedOut": false,
              "duration": 175,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"when b + c < a\"]).then((res) => {\n    expect(res.statusCode).to.equal(418);\n    expect(res.body.error).to.equal(\"Sum of any 2 sides should be greater than the 3rd\");\n});",
              "err": {},
              "uuid": "104febbb-b5a4-4a94-bcdb-07a1576cf377",
              "parentUUID": "061f9d19-0271-407f-b789-34cc576a1e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Sum of two side should be greater than 3rd side[when a + c < b]",
              "fullTitle": "Test Scenarios: Sum of two sides should be greter than 3rd side Verify Sum of two side should be greater than 3rd side[when a + c < b]",
              "timedOut": false,
              "duration": 144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"when a + c < b\"]).then((res) => {\n    expect(res.statusCode).to.equal(418);\n    expect(res.body.error).to.equal(\"Sum of any 2 sides should be greater than the 3rd\");\n});",
              "err": {},
              "uuid": "0339be79-4978-4308-85be-b085fd2d788f",
              "parentUUID": "061f9d19-0271-407f-b789-34cc576a1e72",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1386bb1e-a77a-432a-9118-9b3822716474",
            "104febbb-b5a4-4a94-bcdb-07a1576cf377",
            "0339be79-4978-4308-85be-b085fd2d788f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 455,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1c09d7f1-9c31-4f5b-a8d9-dae0b366a8dc",
          "title": "Test Scenarios: Some critical test data (edge cases)",
          "fullFile": "F:\\Automation Projects\\WithSecure_Assignment\\WithSecure\\test\\triangleCalculationtest.js",
          "file": "\\test\\triangleCalculationtest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify the validation when triangle all side are zero",
              "fullTitle": "Test Scenarios: Some critical test data (edge cases) Verify the validation when triangle all side are zero",
              "timedOut": false,
              "duration": 142,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"when sides are zero\"]).then((res) => {\n    expect(res.statusCode).to.equal(422);\n    expect(res.body.error).to.equal(\"All triangle sides should be greater than 0\");\n});",
              "err": {},
              "uuid": "aca2279f-0701-4764-99c6-a86c10d198b9",
              "parentUUID": "1c09d7f1-9c31-4f5b-a8d9-dae0b366a8dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the validation when triangle all side are minus values",
              "fullTitle": "Test Scenarios: Some critical test data (edge cases) Verify the validation when triangle all side are minus values",
              "timedOut": false,
              "duration": 149,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"when sides are minus\"]).then((res) => {\n    expect(res.statusCode).to.equal(422);\n    expect(res.body.error).to.equal(\"All triangle sides should be greater than 0\");\n});",
              "err": {},
              "uuid": "f29bdd86-2763-4290-a1c9-420f15a765e2",
              "parentUUID": "1c09d7f1-9c31-4f5b-a8d9-dae0b366a8dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the validation when triangle all side have decimal values",
              "fullTitle": "Test Scenarios: Some critical test data (edge cases) Verify the validation when triangle all side have decimal values",
              "timedOut": false,
              "duration": 138,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"when sides are with decimal values\"]).then((res) => {\n    expect(res.statusCode).to.equal(200);\n    expect(res.body.result).to.equal(\"This is versatile triangle\");\n});",
              "err": {},
              "uuid": "5bd2f66a-2e4c-45ad-98f7-c5442c7f5f30",
              "parentUUID": "1c09d7f1-9c31-4f5b-a8d9-dae0b366a8dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the when triangle sides are very small",
              "fullTitle": "Test Scenarios: Some critical test data (edge cases) Verify the when triangle sides are very small",
              "timedOut": false,
              "duration": 144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"when sides are very small\"]).then((res) => {\n    expect(res.statusCode).to.equal(201);\n    expect(res.body.result).to.equal(\"This is isosceles triangle\");\n});",
              "err": {},
              "uuid": "270e98e0-2c29-4327-95f3-7cfed5c906c0",
              "parentUUID": "1c09d7f1-9c31-4f5b-a8d9-dae0b366a8dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the when triangle sides are very big",
              "fullTitle": "Test Scenarios: Some critical test data (edge cases) Verify the when triangle sides are very big",
              "timedOut": false,
              "duration": 162,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"when sides are very big\"]).then((res) => {\n    expect(res.statusCode).to.equal(201);\n    expect(res.body.result).to.equal(\"This is isosceles triangle\");\n});",
              "err": {},
              "uuid": "99c4f3bf-87e8-400e-aa5e-16f0b5e7103b",
              "parentUUID": "1c09d7f1-9c31-4f5b-a8d9-dae0b366a8dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the when triangle sides are string",
              "fullTitle": "Test Scenarios: Some critical test data (edge cases) Verify the when triangle sides are string",
              "timedOut": false,
              "duration": 161,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"when sides are string\"]).then((res) => {\n    expect(res.statusCode).to.equal(422);\n    expect(res.body.error).to.equal(\"All triangle sides should be numeric\");\n});",
              "err": {},
              "uuid": "cdd69ced-da40-4fee-ad48-e2a7b78049d2",
              "parentUUID": "1c09d7f1-9c31-4f5b-a8d9-dae0b366a8dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the when one triangle side is null",
              "fullTitle": "Test Scenarios: Some critical test data (edge cases) Verify the when one triangle side is null",
              "timedOut": false,
              "duration": 154,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"when one sides is null\"]).then((res) => {\n    expect(res.statusCode).to.equal(422);\n    expect(res.body.error).to.equal(\"All triangle sides should be greater than 0\");\n});",
              "err": {},
              "uuid": "9c94de25-17b4-4737-bea1-63dfb6fb93fc",
              "parentUUID": "1c09d7f1-9c31-4f5b-a8d9-dae0b366a8dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the when one triangle side is missing",
              "fullTitle": "Test Scenarios: Some critical test data (edge cases) Verify the when one triangle side is missing",
              "timedOut": false,
              "duration": 183,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"when one sides is missing\"]).then((res) => {\n    expect(res.statusCode).to.equal(422);\n    expect(res.body.error).to.equal(\"Triangle should have 3 side\");\n});",
              "err": {},
              "uuid": "e685f4a5-8561-4586-b17d-21e6e0a38e07",
              "parentUUID": "1c09d7f1-9c31-4f5b-a8d9-dae0b366a8dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the triangle with one additional side",
              "fullTitle": "Test Scenarios: Some critical test data (edge cases) Verify the triangle with one additional side",
              "timedOut": false,
              "duration": 138,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"with additional side\"]).then((res) => {\n    expect(res.statusCode).to.equal(200);\n    expect(res.body.result).to.equal(\"This is versatile triangle\");\n});",
              "err": {},
              "uuid": "7c612fdf-f8c7-44c1-8e04-22247a69ffec",
              "parentUUID": "1c09d7f1-9c31-4f5b-a8d9-dae0b366a8dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the triangle with boundary side values",
              "fullTitle": "Test Scenarios: Some critical test data (edge cases) Verify the triangle with boundary side values",
              "timedOut": false,
              "duration": 168,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"with boundary value\"]).then((res) => {\n    expect(res.statusCode).to.equal(200);\n    expect(res.body.result).to.equal(\"This is versatile triangle\");\n});",
              "err": {},
              "uuid": "cc3af3d4-e862-493f-9e4a-465c2b0fde7a",
              "parentUUID": "1c09d7f1-9c31-4f5b-a8d9-dae0b366a8dc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aca2279f-0701-4764-99c6-a86c10d198b9",
            "f29bdd86-2763-4290-a1c9-420f15a765e2",
            "5bd2f66a-2e4c-45ad-98f7-c5442c7f5f30",
            "270e98e0-2c29-4327-95f3-7cfed5c906c0",
            "99c4f3bf-87e8-400e-aa5e-16f0b5e7103b",
            "cdd69ced-da40-4fee-ad48-e2a7b78049d2",
            "9c94de25-17b4-4737-bea1-63dfb6fb93fc",
            "e685f4a5-8561-4586-b17d-21e6e0a38e07",
            "7c612fdf-f8c7-44c1-8e04-22247a69ffec",
            "cc3af3d4-e862-493f-9e4a-465c2b0fde7a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1539,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}