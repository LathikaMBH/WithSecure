{
  "stats": {
    "suites": 4,
    "tests": 16,
    "passes": 16,
    "pending": 0,
    "failures": 0,
    "start": "2024-12-12T17:37:54.895Z",
    "end": "2024-12-12T17:37:59.168Z",
    "duration": 4273,
    "testsRegistered": 16,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5f10df5e-0e51-49d6-89b6-2664373274f5",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d1578730-b797-480d-a0c0-578c5b3411a2",
          "title": "Validating GET End point",
          "fullFile": "F:\\Automation Projects\\WithSecure_Assignment\\WithSecure\\test\\triangleCalculationtest.js",
          "file": "\\test\\triangleCalculationtest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Retrieve app version with correct url",
              "fullTitle": "Validating GET End point Retrieve app version with correct url",
              "timedOut": false,
              "duration": 480,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.get('/version').then((res) => {\n    expect(res.statusCode).to.equal(200);\n    expect(res.text).to.equal(\"0.0.2\");\n});",
              "err": {},
              "uuid": "b6d9e330-4d5a-4a70-9f3b-e0c5465093ee",
              "parentUUID": "d1578730-b797-480d-a0c0-578c5b3411a2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b6d9e330-4d5a-4a70-9f3b-e0c5465093ee"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 480,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dff25021-23fb-41ae-8f2d-d0fdbed6ad68",
          "title": "all valid shapes of a triangle",
          "fullFile": "F:\\Automation Projects\\WithSecure_Assignment\\WithSecure\\test\\triangleCalculationtest.js",
          "file": "\\test\\triangleCalculationtest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify the equilateral triangle",
              "fullTitle": "all valid shapes of a triangle Verify the equilateral triangle",
              "timedOut": false,
              "duration": 135,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"when a = b = c\"]).then((res) => {\n    expect(res.statusCode).to.equal(200);\n    expect(res.body.result).to.equal(\"This is equilateral triangle\");\n});",
              "err": {},
              "uuid": "a96d996a-58d5-4fcc-b7cf-703f32709139",
              "parentUUID": "dff25021-23fb-41ae-8f2d-d0fdbed6ad68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify two equal side and one different[isosceles triangle]",
              "fullTitle": "all valid shapes of a triangle Verify two equal side and one different[isosceles triangle]",
              "timedOut": false,
              "duration": 147,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"when a = b != c\"]).then((res) => {\n    expect(res.statusCode).to.equal(201);\n    expect(res.body.result).to.equal(\"This is isosceles triangle\");\n});",
              "err": {},
              "uuid": "853c5819-1d98-4293-a7ca-92806c41436c",
              "parentUUID": "dff25021-23fb-41ae-8f2d-d0fdbed6ad68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify valid three sides are different",
              "fullTitle": "all valid shapes of a triangle Verify valid three sides are different",
              "timedOut": false,
              "duration": 150,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"when a != b != c\"]).then((res) => {\n    expect(res.statusCode).to.equal(200);\n    expect(res.body.result).to.equal(\"This is versatile triangle\");\n});",
              "err": {},
              "uuid": "aace47fe-c9c9-4536-ac41-a4d80028f277",
              "parentUUID": "dff25021-23fb-41ae-8f2d-d0fdbed6ad68",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a96d996a-58d5-4fcc-b7cf-703f32709139",
            "853c5819-1d98-4293-a7ca-92806c41436c",
            "aace47fe-c9c9-4536-ac41-a4d80028f277"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 432,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "86448fb6-75a6-4df6-9be7-5507dad1ea42",
          "title": "Test Scenarios: Sum of two sides should be greter than 3rd side",
          "fullFile": "F:\\Automation Projects\\WithSecure_Assignment\\WithSecure\\test\\triangleCalculationtest.js",
          "file": "\\test\\triangleCalculationtest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify Sum of two side should be greater than 3rd side[when a + b < c]",
              "fullTitle": "Test Scenarios: Sum of two sides should be greter than 3rd side Verify Sum of two side should be greater than 3rd side[when a + b < c]",
              "timedOut": false,
              "duration": 167,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"when a + b < c\"]).then((res) => {\n    expect(res.statusCode).to.equal(418);\n    expect(res.body.error).to.equal(\"Sum of any 2 sides should be greater than the 3rd\");\n});",
              "err": {},
              "uuid": "06f35251-5dbc-4ad4-9a08-2d059c50c3db",
              "parentUUID": "86448fb6-75a6-4df6-9be7-5507dad1ea42",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Sum of two side should be greater than 3rd side[when b + c < a]",
              "fullTitle": "Test Scenarios: Sum of two sides should be greter than 3rd side Verify Sum of two side should be greater than 3rd side[when b + c < a]",
              "timedOut": false,
              "duration": 135,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"when b + c < a\"]).then((res) => {\n    expect(res.statusCode).to.equal(418);\n    expect(res.body.error).to.equal(\"Sum of any 2 sides should be greater than the 3rd\");\n});",
              "err": {},
              "uuid": "4f1cb96d-4e50-47ea-bd09-df49c812e442",
              "parentUUID": "86448fb6-75a6-4df6-9be7-5507dad1ea42",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Sum of two side should be greater than 3rd side[when a + c < b]",
              "fullTitle": "Test Scenarios: Sum of two sides should be greter than 3rd side Verify Sum of two side should be greater than 3rd side[when a + c < b]",
              "timedOut": false,
              "duration": 133,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"when a + c < b\"]).then((res) => {\n    expect(res.statusCode).to.equal(418);\n    expect(res.body.error).to.equal(\"Sum of any 2 sides should be greater than the 3rd\");\n});",
              "err": {},
              "uuid": "a1e4a5c4-1c7b-4835-8e41-f19f8281ae25",
              "parentUUID": "86448fb6-75a6-4df6-9be7-5507dad1ea42",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "06f35251-5dbc-4ad4-9a08-2d059c50c3db",
            "4f1cb96d-4e50-47ea-bd09-df49c812e442",
            "a1e4a5c4-1c7b-4835-8e41-f19f8281ae25"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 435,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "33dffb6e-5fe1-4652-a9e2-709cc01a3997",
          "title": "Test Scenarios: Some critical test data (edge cases)",
          "fullFile": "F:\\Automation Projects\\WithSecure_Assignment\\WithSecure\\test\\triangleCalculationtest.js",
          "file": "\\test\\triangleCalculationtest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify the validation when triangle all side are zero",
              "fullTitle": "Test Scenarios: Some critical test data (edge cases) Verify the validation when triangle all side are zero",
              "timedOut": false,
              "duration": 444,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"when sides are zero\"]).then((res) => {\n    expect(res.statusCode).to.equal(422);\n    expect(res.body.error).to.equal(\"All triangle sides should be greater than 0\");\n});",
              "err": {},
              "uuid": "ea983a08-85ce-4b46-a898-7534cc2f4b22",
              "parentUUID": "33dffb6e-5fe1-4652-a9e2-709cc01a3997",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the validation when triangle all side are minus values",
              "fullTitle": "Test Scenarios: Some critical test data (edge cases) Verify the validation when triangle all side are minus values",
              "timedOut": false,
              "duration": 143,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"when sides are minus\"]).then((res) => {\n    expect(res.statusCode).to.equal(422);\n    expect(res.body.error).to.equal(\"All triangle sides should be greater than 0\");\n});",
              "err": {},
              "uuid": "28a18ba7-3ea5-44a8-9db1-9c0822f84d5f",
              "parentUUID": "33dffb6e-5fe1-4652-a9e2-709cc01a3997",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the validation when triangle all side have decimal values",
              "fullTitle": "Test Scenarios: Some critical test data (edge cases) Verify the validation when triangle all side have decimal values",
              "timedOut": false,
              "duration": 149,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"when sides are with decimal values\"]).then((res) => {\n    expect(res.statusCode).to.equal(200);\n    expect(res.body.result).to.equal(\"This is versatile triangle\");\n});",
              "err": {},
              "uuid": "f8104995-572f-429f-89e9-2c152c812160",
              "parentUUID": "33dffb6e-5fe1-4652-a9e2-709cc01a3997",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the when triangle sides are very small",
              "fullTitle": "Test Scenarios: Some critical test data (edge cases) Verify the when triangle sides are very small",
              "timedOut": false,
              "duration": 1345,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"when sides are very small\"]).then((res) => {\n    expect(res.statusCode).to.equal(201);\n    expect(res.body.result).to.equal(\"This is isosceles triangle\");\n});",
              "err": {},
              "uuid": "24e244d8-f161-4658-8916-9d35810b39d6",
              "parentUUID": "33dffb6e-5fe1-4652-a9e2-709cc01a3997",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the when triangle sides are very big",
              "fullTitle": "Test Scenarios: Some critical test data (edge cases) Verify the when triangle sides are very big",
              "timedOut": false,
              "duration": 136,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"when sides are very big\"]).then((res) => {\n    expect(res.statusCode).to.equal(201);\n    expect(res.body.result).to.equal(\"This is isosceles triangle\");\n});",
              "err": {},
              "uuid": "340ab3ad-c124-457c-9c19-e99487bf8373",
              "parentUUID": "33dffb6e-5fe1-4652-a9e2-709cc01a3997",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the when triangle sides are string",
              "fullTitle": "Test Scenarios: Some critical test data (edge cases) Verify the when triangle sides are string",
              "timedOut": false,
              "duration": 145,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"when sides are string\"]).then((res) => {\n    expect(res.statusCode).to.equal(422);\n    expect(res.body.error).to.equal(\"All triangle sides should be numeric\");\n});",
              "err": {},
              "uuid": "0ddd4d1e-c813-46d2-a826-ab7d38492ab8",
              "parentUUID": "33dffb6e-5fe1-4652-a9e2-709cc01a3997",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the when one triangle side is null",
              "fullTitle": "Test Scenarios: Some critical test data (edge cases) Verify the when one triangle side is null",
              "timedOut": false,
              "duration": 127,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"when one sides is null\"]).then((res) => {\n    expect(res.statusCode).to.equal(422);\n    expect(res.body.error).to.equal(\"All triangle sides should be greater than 0\");\n});",
              "err": {},
              "uuid": "135ad761-4a29-43f7-87ee-2f554403d5e2",
              "parentUUID": "33dffb6e-5fe1-4652-a9e2-709cc01a3997",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the when one triangle side is missing",
              "fullTitle": "Test Scenarios: Some critical test data (edge cases) Verify the when one triangle side is missing",
              "timedOut": false,
              "duration": 200,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"when one sides is missing\"]).then((res) => {\n    expect(res.statusCode).to.equal(422);\n    expect(res.body.error).to.equal(\"Triangle should have 3 side\");\n});",
              "err": {},
              "uuid": "29391604-f0d0-437a-b6c0-d3f3947f6ae8",
              "parentUUID": "33dffb6e-5fe1-4652-a9e2-709cc01a3997",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the triangle with one additional side",
              "fullTitle": "Test Scenarios: Some critical test data (edge cases) Verify the triangle with one additional side",
              "timedOut": false,
              "duration": 129,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request.post('/').send(data[\"with additional side\"]).then((res) => {\n    expect(res.statusCode).to.equal(200);\n    expect(res.body.result).to.equal(\"This is versatile triangle\");\n});",
              "err": {},
              "uuid": "f653e6da-4f30-4007-aa39-aac26fe52f9d",
              "parentUUID": "33dffb6e-5fe1-4652-a9e2-709cc01a3997",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ea983a08-85ce-4b46-a898-7534cc2f4b22",
            "28a18ba7-3ea5-44a8-9db1-9c0822f84d5f",
            "f8104995-572f-429f-89e9-2c152c812160",
            "24e244d8-f161-4658-8916-9d35810b39d6",
            "340ab3ad-c124-457c-9c19-e99487bf8373",
            "0ddd4d1e-c813-46d2-a826-ab7d38492ab8",
            "135ad761-4a29-43f7-87ee-2f554403d5e2",
            "29391604-f0d0-437a-b6c0-d3f3947f6ae8",
            "f653e6da-4f30-4007-aa39-aac26fe52f9d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2818,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}